Makefile Documentation
======================

This document describes the Makefile provided with the Kaira project. The Makefile defines several targets to help with common development tasks such as cleaning build artifacts, running tests, syncing branches, and formatting code.

File Location
-------------
The Makefile is located at [kaira/Makefile](Makefile) in the repository.

Overview
--------
The Makefile contains the following targets:

- **help**: Display target help with short descriptions.
- **clean**: Remove autogenerated files including build artifacts, caches, and temporary files.
- **clean-logs**: Remove log files.
- **format**: Run pre-commit hooks to format code and check for issues.
- **sync**: Update the current branch with changes from the main branch.
- **test**: Run tests excluding slow ones.
- **test-full**: Run all tests.

Targets in Detail
-----------------

help
^^^^
The `help` target scans the Makefile for lines with comments (using the `##` marker) and displays all available targets with their descriptions:

.. code-block:: make

    help:  ## Show help
        @grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

clean
^^^^^
The `clean` target removes temporary and autogenerated files. It deletes the distribution directory, removes macOS system files (like .DS_Store), Python caches (__pycache__, .pyc, .pyo), pytest caches, Jupyter Notebook checkpoints and the coverage file.

.. code-block:: make

    clean: ## Clean autogenerated files
        rm -rf dist
        find . -type f -name "*.DS_Store" -ls -delete
        find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
        find . | grep -E ".pytest_cache" | xargs rm -rf
        find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
        rm -f .coverage

clean-logs
^^^^^^^^^^
The `clean-logs` target deletes all files under the logs directory.

.. code-block:: make

    clean-logs: ## Clean logs
        rm -rf logs/**

format
^^^^^^
The `format` target runs all pre-commit hooks to automatically format code and check for basic hygiene issues.

.. code-block:: make

    format: ## Run pre-commit hooks
        pre-commit run -a

sync
^^^^
The `sync` target pulls the latest changes from the remote main branch and merges them into the current branch.

.. code-block:: make

    sync: ## Merge changes from main branch to your current branch
        git pull
        git pull origin main

test
^^^^
The `test` target uses pytest to run tests that are marked as not slow. This is useful for quick validation during development.

.. code-block:: make

    test: ## Run not slow tests
        pytest -k "not slow"

test-full
^^^^^^^^^
The `test-full` target runs all available tests.

.. code-block:: make

    test-full: ## Run all tests
        pytest
