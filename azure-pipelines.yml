# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - master

strategy:
  matrix:
    linux38:
      imageName: "ubuntu-latest"
      python.version: "3.8"
    linux39:
      imageName: "ubuntu-latest"
      python.version: "3.9"
    linux310:
      imageName: "ubuntu-latest"
      python.version: "3.10"
    linux311:
      imageName: "ubuntu-latest"
      python.version: "3.11"
    linux312:
      imageName: "ubuntu-latest"
      python.version: "3.12"
    linux313:
      imageName: "ubuntu-latest"
      python.version: "3.13"
    osx64_38:
      imageName: "macOS-latest"
      python.version: "3.8"
    osx64_39:
      imageName: "macOS-latest"
      python.version: "3.9"
    osx64_310:
      imageName: "macOS-latest"
      python.version: "3.10"
    osx64_311:
      imageName: "macOS-latest"
      python.version: "3.11"
    osx64_312:
      imageName: "macOS-latest"
      python.version: "3.12"
    osx64_313:
      imageName: "macOS-latest"
      python.version: "3.13"
    win64_38:
      imageName: "windows-latest"
      python.version: "3.8"
    win64_39:
      imageName: "windows-latest"
      python.version: "3.9"
    win64_310:
      imageName: "windows-latest"
      python.version: "3.10"
    win64_311:
      imageName: "windows-latest"
      python.version: "3.11"
    win64_312:
      imageName: "windows-latest"
      python.version: "3.12"
    win64_313:
      imageName: "windows-latest"
      python.version: "3.13"

  maxParallel: 18

pool:
  vmImage: $(imageName)

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "$(python.version)"
    displayName: "Use Python $(python.version)"

  - script: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
    displayName: "Install dependencies"

  - script: |
      pip install pytest pytest-azurepipelines coverage
      pytest --cov=. --cov-report=xml
    displayName: "pytest"

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "**/junit.xml"
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage.xml"
